{"version":3,"sources":["components/Tasks.js","App.js","serviceWorker.js","index.js"],"names":["Tasks","state","tasks","data","itemsToShow","expanding","showMore","setState","prevState","length","showLess","toggleCheckbox","e","index","slice","findIndex","task","id","Number","target","Fragment","this","map","key","type","checked","completed","onChange","details","onClick","React","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"w/BAoEeA,E,2MA/DbC,MAAQ,CACNC,MAAOC,EACPC,YAAa,EACbC,WAAW,G,EAGbC,SAAW,WACT,EAAKC,UAAS,SAAAC,GACZ,OAAIA,EAAUJ,YAAc,GAAKI,EAAUN,MAAMO,OACxC,CAAEL,YAAaI,EAAUN,MAAMO,OAAQJ,WAAW,GAElD,CAAED,YAAaI,EAAUJ,YAAc,O,EAKpDM,SAAW,WACT,EAAKH,UAAS,SAAAC,GACZ,OAAIA,EAAUJ,YAAc,GAAK,EACxB,CAAEA,YAAa,EAAGC,WAAW,GAE7B,CAAED,YAAaI,EAAUJ,YAAc,O,EAKpDO,eAAiB,SAACC,GAChB,IAAMC,EAAQ,EAAKZ,MAAMC,MAAMY,MAAM,EAAG,EAAKb,MAAMG,aAAaW,WAAU,SAAAC,GACxE,OAAOA,EAAKC,KAAOC,OAAON,EAAEO,OAAOF,OAE/Bf,EAAK,YAAO,EAAKD,MAAMC,OAC7BA,EAAMW,GAAN,WAA6BX,EAAMW,GAAN,UAE7B,EAAKN,SAAS,CAAEL,MAAOA,K,wEAIf,IAAD,OACP,OACE,kBAAC,IAAMkB,SAAP,KACGC,KAAKpB,MAAMC,MAAMY,MAAM,EAAGO,KAAKpB,MAAMG,aAAakB,KAAI,SAAAN,GACrD,OAAO,yBAAKO,IAAKP,EAAKC,IACpB,+BACE,2BACEA,GAAID,EAAKC,GACTO,KAAK,WACLC,QAAST,EAAKU,UACdC,SAAU,EAAKhB,iBAEhBK,EAAKY,aAKZ,4BAAQC,QAASR,KAAKpB,MAAMI,UAAYgB,KAAKf,SAAWe,KAAKX,UAC1DW,KAAKpB,MAAMI,UAAY,YAAc,kB,GAxD5ByB,IAAMC,WCWXC,MAXf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAAlB,YAGA,kBAAC,EAAD,QCEcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.15e5d302.chunk.js","sourcesContent":["import React from 'react';\nimport data from '../data/tasks.json';\n\n\nclass Tasks extends React.Component {\n  state = {\n    tasks: data,\n    itemsToShow: 5,\n    expanding: true\n  };\n  \n  showMore = () => {\n    this.setState(prevState => {\n      if (prevState.itemsToShow + 5 >= prevState.tasks.length) {\n        return { itemsToShow: prevState.tasks.length, expanding: false };\n      } else {\n        return { itemsToShow: prevState.itemsToShow + 5 };\n      }\n    });\n  }\n\n  showLess = () => {\n    this.setState(prevState => {\n      if (prevState.itemsToShow - 5 <= 5) {\n        return { itemsToShow: 5, expanding: true };\n      } else {\n        return { itemsToShow: prevState.itemsToShow - 5 };\n      }\n    });\n  }\n\n  toggleCheckbox = (e) => {\n    const index = this.state.tasks.slice(0, this.state.itemsToShow).findIndex(task => {\n      return task.id === Number(e.target.id);\n    })\n    const tasks = [...this.state.tasks];\n    tasks[index]['completed'] = !tasks[index]['completed'];\n\n    this.setState({ tasks: tasks });\n  }\n\n\n  render() {\n    return (\n      <React.Fragment>\n        {this.state.tasks.slice(0, this.state.itemsToShow).map(task => {\n          return <div key={task.id}>\n            <label>\n              <input\n                id={task.id}\n                type='checkbox'\n                checked={task.completed}\n                onChange={this.toggleCheckbox}\n              />\n              {task.details}\n            </label>\n          </div>\n        })}\n\n        <button onClick={this.state.expanding ? this.showMore : this.showLess}>\n          {this.state.expanding ? 'Show More' : 'Show Less'}\n        </button>\n\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Tasks;","import React from 'react';\nimport './App.css';\nimport Tasks from './components/Tasks'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n          Task App\n      </header>\n      <Tasks />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}